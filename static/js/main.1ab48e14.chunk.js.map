{"version":3,"sources":["lib/api/index.ts","routes.ts","views/pages/home/home.tsx","state/dummy/index.ts","state/reducers.ts","state/store.ts","state/test.tsx","state/index.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["API_DOMAIN","process","REACT_APP_API","http","request","a","fetch","response","json","parsedBody","ok","Error","statusText","pathAppender","path","get","args","method","Request","routes","component","dummy","useSelector","st","useState","intervalState","setIntervalState","dispatch","useDispatch","useEffect","then","res","console","log","body","isOp","length","className","join","onClick","forEach","clearInterval","localStorage","setItem","toString","setInterval","item","parseInt","getItem","type","payload","AddItem","rootReducers","combineReducers","data","action","devToolsEnhancer","composeWithDevTools","name","trace","AppStore","createStore","applyMiddleware","thunk","middleware","StoreProvider","configureStore","children","store","App","renderRoutes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1ab48e14.chunk.js","sourcesContent":["const { REACT_APP_API: API_DOMAIN } = process.env;\n\ninterface HttpResponse<T> extends Response {\n  parsedBody?: T;\n}\n\nconst http = async <T>(request: RequestInfo): Promise<HttpResponse<T>> => {\n  const response: HttpResponse<T> = await fetch(request);\n  try {\n    response.parsedBody = await response.json();\n  } catch (ex) {}\n\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n  return response;\n};\n\nconst pathAppender = (path: string): string => {\n  return `${API_DOMAIN}${path}`;\n};\n\nconst get = async <T>(\n  path: string,\n  args: RequestInit = { method: 'get' }\n): Promise<HttpResponse<T>> => {\n  return await http<T>(new Request(pathAppender(path), args));\n};\n\nconst post = async <T>(\n  path: string,\n  body: any,\n  args: RequestInit = { method: 'post', body: JSON.stringify(body) }\n): Promise<HttpResponse<T>> => {\n  return await http<T>(new Request(pathAppender(path), args));\n};\n\nconst put = async <T>(\n  path: string,\n  body: any,\n  args: RequestInit = { method: 'put', body: JSON.stringify(body) }\n): Promise<HttpResponse<T>> => {\n  return await http<T>(new Request(pathAppender(path), args));\n};\n\nexport { get, post, put };\n","import { RouteConfig } from 'react-router-config';\n\nimport { Home } from './views/pages/home';\n\nexport const routes: RouteConfig[] = [\n  {\n    path: '/',\n    component: Home,\n  },\n];\n","import React, { useEffect, useState } from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { get } from 'src/lib/api';\nimport { AddItem } from 'src/state/dummy';\nimport { AppState } from 'src/state/reducers';\nimport './home.scss';\n\nexport const Home: React.FC = () => {\n  const dummy = useSelector((st: AppState) => st.dummy);\n  const [intervalState, setIntervalState] = useState<NodeJS.Timeout[]>([]);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    get('/todos/1').then((res) => {\n      console.log(res.body);\n    });\n  }, []);\n  const isOp = intervalState.length > 0;\n  const stopAdding = (): void => {\n    intervalState.forEach(clearInterval);\n    setIntervalState([]);\n  };\n\n  const addItem = (): void => {\n    localStorage.setItem('dummy', (dummy.length + 1).toString());\n    setIntervalState([\n      ...intervalState,\n      setInterval(() => {\n        const item = parseInt(localStorage.getItem('dummy') || '0');\n        dispatch(AddItem(item));\n        localStorage.setItem('dummy', `${item + 1}`);\n      }, 100),\n    ]);\n  };\n  return (\n    <div className='container'>\n      {dummy.join(',')}\n      <br />\n      <button onClick={isOp ? stopAdding : addItem}>\n        {isOp ? 'Stop' : 'Add'}\n      </button>\n    </div>\n  );\n};\n","type DummyAction = 'add';\n\nconst reducer = (\n  data = [1, 2, 3],\n  action: { type: DummyAction; payload: number }\n) => {\n  if (action.type === 'add') {\n    return [...data, action.payload];\n  }\n  return data;\n};\n\nconst AddItem = (item: number) => {\n  return {\n    type: 'add',\n    payload: item,\n  };\n};\n\nexport { AddItem, reducer };\n","import { combineReducers } from 'redux';\n\nimport { reducer } from './dummy';\n\nexport const rootReducers = combineReducers({\n  dummy: reducer,\n});\n\nexport type AppState = ReturnType<typeof rootReducers>;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\n\nimport { name } from './../../package.json';\nimport { rootReducers } from './reducers';\n\nconst devToolsEnhancer = composeWithDevTools({\n  name: `${name}-DevTools`,\n  trace: true,\n});\nexport const AppStore = createStore(\n  rootReducers,\n  devToolsEnhancer(applyMiddleware(thunk))\n);\n","import configureStore from 'redux-mock-store';\nimport thunk from 'redux-thunk';\nconst middleware = [thunk];\n\nexport const mockStore = configureStore(middleware);\n","import React from 'react';\n\nimport { Provider } from 'react-redux';\n\nimport { AppState } from './reducers';\nimport { AppStore } from './store';\nimport { mockStore } from './test';\n\ntype StoreProvideType = {\n  children: React.ReactNode;\n};\n\nconst StoreProvider: React.FC<StoreProvideType> = ({\n  children,\n}: StoreProvideType) => {\n  return <Provider store={AppStore}>{children}</Provider>;\n};\n\ntype MockStoreProps = {\n  children: React.ReactNode;\n  store: AppState;\n};\n\nconst WrapMockStore: React.FC<MockStoreProps> = ({\n  children,\n  store,\n}: MockStoreProps) => {\n  return <Provider store={mockStore(store)}>{children}</Provider>;\n};\n\nexport { StoreProvider, AppStore, WrapMockStore };\n","import * as React from 'react';\n\nimport { renderRoutes } from 'react-router-config';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { routes } from './routes';\nimport { StoreProvider } from './state';\n\nconst App: React.FC = () => {\n  return (\n    <div className='App'>\n      <StoreProvider>\n        <Router>{renderRoutes(routes)}</Router>\n      </StoreProvider>\n    </div>\n  );\n};\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}